What is a React Component?
--------------------------
	A React component is a reusable block of code that represents a part of the user interface. Components let you divide your UI into smaller pieces, each with its own logic and functionality. They can manage their state, accept inputs (called props), and produce outputs (a rendered UI). Components can be either class-based or functional, though functional components are more commonly used in modern React development.

Functional vs Class Components
	1) Functional Components:
		- Are simpler and primarily used to render UI.
		- Do not require a constructor or complex lifecycle methods.
		- Can use React Hooks (like useState, useEffect) for state and side effects.
	2) Class Components:
		- Use a class structure and allow access to lifecycle methods such as componentDidMount and componentDidUpdate.
		- Manage state with a state object.
		- Have become less popular with the introduction of React Hooks.
		
	Example of a Functional Component
		Here's a simple example:
		
			import React, { useState } from "react";
			const Greeting = (props) => {
			  // Using the useState Hook for local state
			  const [message, setMessage] = useState("Welcome to React!");

			  const handleClick = () => {
				setMessage("You clicked the button!");
			  };
			  return (
				<div>
				  <h1>{props.name}</h1>
				  <p>{message}</p>
				  <button onClick={handleClick}>Click Me</button>
				</div>
			  );
			};
			export default Greeting;
			
		Explanation of the Example
			Props: The props object allows data to be passed to the component from its parent. Here, name is a prop that gets displayed in the <h1> tag.
			State: The useState Hook manages the internal state of the component. In this example, message is the state variable, and setMessage is the function to update it.
			Event Handling: The handleClick function updates the message when the button is clicked.
			Rendering: The JSX syntax (<div>...</div>) is used to define the UI structure of the component.
			
	Example of a Class Component
		Here's how you could write the same component using a class:
		
			import React, { Component } from "react";
			class Greeting extends Component {
			  constructor(props) {
				super(props);
				this.state = {
				  message: "Welcome to React!",
				};
			  }
			  handleClick = () => {
				this.setState({ message: "You clicked the button!" });
			  };
			  render() {
				return (
				  <div>
					<h1>{this.props.name}</h1>
					<p>{this.state.message}</p>
					<button onClick={this.handleClick}>Click Me</button>
				  </div>
				);
			  }
			}
			export default Greeting;
		
		Key Points for Class Component Example:
		1) Constructor and State: The constructor method initializes the state.
		2) Lifecycle: Class components have lifecycle methods like componentDidMount, componentDidUpdate, etc., which are useful for more complex scenarios.
		3) Event Handling: Similar to functional components, events can be handled using functions.
		
	When to Use Components?
		1) Use functional components for most cases since React Hooks make them powerful and simple.
		2) Use class components only if you're working with legacy codebases or need access to lifecycle methods that aren't yet covered by Hooks.
	
		React components are the building blocks of React applications, making development modular and easier to manage.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What is JSX?
------------
	JSX stands for JavaScript XML. It’s a syntax extension for JavaScript used in React. It allows you to write HTML elements directly in JavaScript, making the code more readable and easier to write. JSX is then transformed (by tools like Babel) into regular JavaScript objects that React can efficiently render to the DOM.
	
Why Use JSX?
	1) Ease of Writing: Combines HTML-like syntax with JavaScript functionality in one file.
	2) Readability: Makes the structure of the component more intuitive and understandable.
	3) Integration: Allows embedding JavaScript expressions within the HTML-like code.

Rules of JSX
	1) Single Parent Element: JSX must have one root element. If multiple elements are needed, wrap them inside a parent (like a <div> or a React Fragment).
			// Invalid
			return (
			  <h1>Hello</h1>
			  <p>Welcome</p>
			);

			// Valid
			return (
			  <div>
				<h1>Hello</h1>
				<p>Welcome</p>
			  </div>
			);
	2) JavaScript Expressions: Curly braces {} are used to embed JavaScript expressions inside JSX.
			const name = "Anurag";
			return <h1>Hello, {name}!</h1>;
	3) Class Attribute: Use className instead of class because class is a reserved keyword in JavaScript.
			<div className="container">This is a container</div>
	4) Self-Closing Tags: JSX requires self-closing tags for elements that don't have children.	
			<img src="image.png" alt="Sample" />

	Example of JSX
		Here’s an example of JSX in action:	
		
			import React from "react";
			const UserCard = () => {
			  const userName = "Anurag";
			  const userProfession = "Software Engineer";
			  return (
				<div className="user-card">
				  <h2>{userName}</h2>
				  <p>Profession: {userProfession}</p>
				  <button onClick={() => alert(`Hello, ${userName}!`)}>Say Hello</button>
				</div>
			  );
			};
			export default UserCard;
			
	Explanation of the Example
		1) HTML-Like Syntax: The div, h2, p, and button tags resemble HTML but are written in JSX.
		2) Dynamic Data: The variables userName and userProfession are embedded inside {} to dynamically display their values.
		3) Event Handling: The onClick event in the <button> tag executes a JavaScript function when clicked.
		4) CSS: You can style elements by using the className attribute and linking CSS files.
	
	React Without JSX
		JSX is syntactic sugar. Without it, you would need to use React.createElement() to manually define your elements. Here's how the above example would look without JSX:
		
			import React from "react";
			const UserCard = () => {
			  return React.createElement(
				"div",
				{ className: "user-card" },
				React.createElement("h2", null, "Anurag"),
				React.createElement("p", null, "Profession: Software Engineer"),
				React.createElement(
				  "button",
				  { onClick: () => alert("Hello, Anurag!") },
				  "Say Hello"
				)
			  );
			};
			export default UserCard;
		As you can see, using JSX simplifies and enhances readability!
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Error Handling :
---------------
	Error handling in React applications is crucial to create a seamless user experience by gracefully managing issues such as broken components, failed API calls, or invalid user input. Let's break this down into actionable steps along with examples.
	 
Types of Errors in React Applications
	1) Runtime Errors: Errors due to invalid operations during runtime (e.g., dividing by zero, null references).
	2) Logical Errors: Errors in application logic (e.g., incorrect calculations or conditions).
	3) Network Errors: Issues like API failure, timeouts, or invalid responses.
	4) Unhandled Component Errors: Errors caused by component rendering issues.
	React provides tools and patterns to address these types of errors, such as error boundaries, try-catch blocks, and custom error handling logic.
	
1. Using Error Boundaries for Component Errors
	Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the application.
	Example: Error Boundary Implementation
		import React, { Component } from "react";
		class ErrorBoundary extends Component {
		  constructor(props) {
			super(props);
			this.state = { hasError: false };
		  }
		  static getDerivedStateFromError(error) {
			// Update state to display the fallback UI
			return { hasError: true };
		  }
		  componentDidCatch(error, info) {
			// Log the error details to an error reporting service
			console.error("ErrorBoundary caught an error:", error, info);
		  }
		  render() {
			if (this.state.hasError) {
			  return <h1>Something went wrong. Please try again later.</h1>;
			}
			return this.props.children;
		  }
		}
		export default ErrorBoundary;
		
	Usage: Wrap your components with the ErrorBoundary:
		import React from "react";
		import ErrorBoundary from "./ErrorBoundary";
		import SomeComponent from "./SomeComponent";
		function App() {
		  return (
			<ErrorBoundary>
			  <SomeComponent />
			</ErrorBoundary>
		  );
		}
		export default App;

2) Handling Errors in API Calls
	Network errors, such as failed API calls, can be caught using try-catch blocks or .catch() handlers with fetch or Axios.
	Example: Handling API Errors with try-catch
	
		import React, { useState, useEffect } from "react";
		const FetchData = () => {
		  const [data, setData] = useState(null);
		  const [error, setError] = useState(null);
		  useEffect(() => {
			const fetchData = async () => {
			  try {
				const response = await fetch("https://api.example.com/data");
				if (!response.ok) {
				  throw new Error(`HTTP error! Status: ${response.status}`);
				}
				const result = await response.json();
				setData(result);
			  } catch (err) {
				setError(err.message);
			  }
			};
			fetchData();
		  }, []);
		  if (error) {
			return <p>Error: {error}</p>;
		  }
		  if (!data) {
			return <p>Loading...</p>;
		  }
		  return <div>Data: {JSON.stringify(data)}</div>;
		};
		export default FetchData;

3. Handling Form Validation Errors
	Form handling often involves detecting user input errors such as invalid emails or missing fields.
	Example: Form Error Handling

		import React, { useState } from "react";
		const FormValidation = () => {
		  const [email, setEmail] = useState("");
		  const [error, setError] = useState("");
		  const validateEmail = (value) => {
			const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
			return emailRegex.test(value);
		  };
		  const handleSubmit = (event) => {
			event.preventDefault();
			if (!validateEmail(email)) {
			  setError("Invalid email address");
			  return;
			}
			setError(""); // Clear the error
			alert("Form submitted successfully!");
		  };
		  return (
			<form onSubmit={handleSubmit}>
			  <label>
				Email:
				<input
				  type="email"
				  value={email}
				  onChange={(e) => setEmail(e.target.value)}
				/>
			  </label>
			  {error && <p style={{ color: "red" }}>{error}</p>}
			  <button type="submit">Submit</button>
			</form>
		  );
		};
		export default FormValidation;

4. Fallback UI for Entire Applications
	You can use React’s ErrorBoundary in the root of the app to provide a fallback UI for the whole application.
	Example: Global Fallback UI

		import React from "react";
		import ReactDOM from "react-dom";
		import ErrorBoundary from "./ErrorBoundary";
		import App from "./App";

		ReactDOM.render(
		  <ErrorBoundary>
			<App />
		  </ErrorBoundary>,
		  document.getElementById("root")
		);

5. Logging and Monitoring Errors
	Integrate error monitoring tools like Sentry, LogRocket, or Datadog to capture and analyze errors in production.
	Example: Integrating Sentry
	
		import * as Sentry from "@sentry/react";
		Sentry.init({
		  dsn: "YOUR_SENTRY_DSN",
		});
		function App() {
		  return (
			<Sentry.ErrorBoundary fallback={<h1>An unexpected error occurred.</h1>}>
			  <YourApplication />
			</Sentry.ErrorBoundary>
		  );
		}
		export default App;

6. Graceful Degradation for Edge Cases
	Use conditional rendering to handle edge cases without breaking the UI:
	Example: Safeguarding Against Undefined Data
	
		const UserProfile = ({ user }) => {
		  if (!user) {
			return <p>No user data available.</p>;
		  }

		  return (
			<div>
			  <h1>{user.name}</h1>
			  <p>Email: {user.email}</p>
			</div>
		  );
		};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Authentication and Authorization 
--------------------------------
	Authentication and authorization are critical aspects of any application, ensuring that only valid users can access the system and that they have the appropriate permissions for specific resources. Let's explore how to implement authentication and authorization in a React application using JSON Web Tokens (JWT) as an example.
	
Overview of Authentication and Authorization
	Authentication: Confirms the identity of a user. It involves logging in, verifying credentials (like username and password), and issuing a token for the user.
	Authorization: Determines what resources the authenticated user is allowed to access. Permissions and roles govern this process.
	
Steps to Implement Authentication and Authorization

	1. Backend Setup (Mock Example)
		For this example, assume you have an API that:
			- Authenticates users and returns a JWT.
			- Provides access to resources based on the user's role.

		Here’s a mock backend setup with Node.js for clarity:
			// Mock Backend (Express.js)
			const express = require("express");
			const jwt = require("jsonwebtoken");

			const app = express();
			app.use(express.json());

			const SECRET_KEY = "your_secret_key";

			// Mock users database
			const users = [
			  { id: 1, username: "admin", password: "admin", role: "admin" },
			  { id: 2, username: "user", password: "user", role: "user" },
			];

			// Login route
			app.post("/login", (req, res) => {
			  const { username, password } = req.body;
			  const user = users.find((u) => u.username === username && u.password === password);

			  if (!user) return res.status(401).send("Invalid credentials");

			  const token = jwt.sign({ id: user.id, role: user.role }, SECRET_KEY, { expiresIn: "1h" });
			  res.json({ token });
			});

			// Protected route
			app.get("/protected", (req, res) => {
			  const token = req.headers.authorization?.split(" ")[1];

			  if (!token) return res.status(401).send("Unauthorized");

			  try {
				const decoded = jwt.verify(token, SECRET_KEY);
				res.json({ message: "This is protected data", user: decoded });
			  } catch (err) {
				res.status(403).send("Invalid token");
			  }
			});

			app.listen(4000, () => console.log("Server running on port 4000"));

	2. Frontend Setup
		Dependencies
		Install the following:
			npm install react-router-dom axios jwt-decode
			
		Basic Folder Structure
			src/
			  components/
				Login.js
				Dashboard.js
				ProtectedRoute.js
			  App.js
			  index.js

	3. Login Component
		This component handles user authentication by sending credentials to the backend and storing the JWT.
		
			import React, { useState } from "react";
			import { useNavigate } from "react-router-dom";
			import axios from "axios";
			const Login = () => {
			  const [username, setUsername] = useState("");
			  const [password, setPassword] = useState("");
			  const [error, setError] = useState("");
			  const navigate = useNavigate();
			  const handleLogin = async (e) => {
				e.preventDefault();
				try {
				  const response = await axios.post("http://localhost:4000/login", { username, password });
				  localStorage.setItem("token", response.data.token);
				  navigate("/dashboard");
				} catch (err) {
				  setError("Invalid username or password");
				}
			  };
			  return (
				<form onSubmit={handleLogin}>
				  <h2>Login</h2>
				  {error && <p style={{ color: "red" }}>{error}</p>}
				  <input
					type="text"
					placeholder="Username"
					value={username}
					onChange={(e) => setUsername(e.target.value)}
					required
				  />
				  <input
					type="password"
					placeholder="Password"
					value={password}
					onChange={(e) => setPassword(e.target.value)}
					required
				  />
				  <button type="submit">Login</button>
				</form>
			  );
			};
			export default Login;

	4. Protected Route Component
		Ensures only authenticated users can access certain routes.
		
			import React from "react";
			import { Navigate } from "react-router-dom";
			import jwtDecode from "jwt-decode";

			const ProtectedRoute = ({ children }) => {
			  const token = localStorage.getItem("token");

			  if (!token) {
				return <Navigate to="/" />;
			  }

			  try {
				jwtDecode(token); // Decode the token to ensure it's valid
				return children;
			  } catch (err) {
				localStorage.removeItem("token"); // Remove invalid token
				return <Navigate to="/" />;
			  }
			};

			export default ProtectedRoute;

	5. Dashboard Component
		A simple page accessible only by authenticated users.
			import React from "react";

			const Dashboard = () => {
			  const token = localStorage.getItem("token");
			  const logout = () => {
				localStorage.removeItem("token");
				window.location.href = "/";
			  };

			  return (
				<div>
				  <h1>Welcome to the Dashboard</h1>
				  <p>Your token: {token}</p>
				  <button onClick={logout}>Logout</button>
				</div>
			  );
			};

			export default Dashboard;
			
	6. App Component
		Integrates routing, authentication, and protected routes.

			import React from "react";
			import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
			import Login from "./components/Login";
			import Dashboard from "./components/Dashboard";
			import ProtectedRoute from "./components/ProtectedRoute";

			function App() {
			  return (
				<Router>
				  <Routes>
					<Route path="/" element={<Login />} />
					<Route
					  path="/dashboard"
					  element={
						<ProtectedRoute>
						  <Dashboard />
						</ProtectedRoute>
					  }
					/>
				  </Routes>
				</Router>
			  );
			}

			export default App;

	How It Works
		1) Authentication: 
			- The Login component sends credentials to the backend.
			- If valid, a JWT is stored in localStorage.
			
		2) Authorization:
			- The ProtectedRoute component verifies the JWT before granting access to secured routes.
		
		3) Token Management:
			- Tokens are stored in localStorage and validated on every protected route.
			
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

React Redux
Redux is a state management library often used with React to manage the application state in a predictable and efficient way. It works by providing a centralized store for all application data, making it easier to share state across components and handle complex state updates.

Why Use Redux?
	1) Centralized State: All application state is stored in a single object.	
	2) Predictable State Changes: State updates are handled in a consistent way using reducers.
	3) Improved Debugging: Tools like Redux DevTools allow you to inspect state changes and debug easily.
	4) Global Accessibility: Any component can access state without prop drilling.
	
Core Concepts in Redux
	1)Store: The centralized location where the entire state of the application lives.
	2)Actions: Plain JavaScript objects that describe what you want to do (e.g., updating a state value). 
		An action contains:
			{
  type: 'ACTION_TYPE',   // Type of action
  payload: {}           // (Optional) Data to update the state
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------