Map :
-----
	A Map is a data structure that represents a collection of key-value pairs, where each key is unique and maps to one specific value. Unlike other collections (like lists or sets), a Map is not a part of the standard Collection interface but is a separate interface in Java, found in the java.util package.
	
	Key Concepts:
		1) Key-Value Pair: 
			- Key: A unique identifier used to retrieve the corresponding value. If you try to insert a duplicate key, the map will replace the existing value with the new one.
			- Value: The data associated with the key. Values do not have to be unique.
		2) Implementations of Map:
			- HashMap: Uses a hash table. It does not maintain any order of insertion; however, its average time complexity for basic operations (put, get, remove) is O(1). It allows one null key and multiple null values.
			- LinkedHashMap: Extends HashMap to maintain the insertion order (or the order in which items were last accessed) using a linked list.
			- TreeMap: Implements SortedMap, meaning that it maintains its entries in a sorted order based on the keys (either natural ordering or via a provided comparator). Its operations have O(log n) time complexity.
			- ConcurrentHashMap: A thread-safe version of HashMap designed for concurrent operations within multi-threaded code.

	Common Methods: 
		- put(key, value): Adds a key-value pair to the map. If the key already exists, it updates the value.
		- get(key): Retrieves the value associated with the given key.
		- remove(key): Removes the key and its associated value.
		- containsKey(key): Checks if the map contains a particular key.
		- containsValue(value): Checks if the map includes one or more keys mapping to a specific value.
		- keySet(): Returns a set view of the keys contained in the map.
		- entrySet(): Returns a set view of the mappings (key-value pairs) contained in the map.
		- values(): Returns a collection view of the values contained in the map.
		
===============================================================================================================================================================================================

1) HashMap :
------------
	A HashMap is a popular implementation of the Map interface that allows you to store key-value pairs with efficient average-case performance of O(1) for basic operations like insertion (put) and lookup (get).
	
	1. Internal Data Structure : At its core, a Java HashMap uses an array of buckets. Each bucket is essentially a container that can hold multiple entries. An entry is normally represented by an internal static class (often called Node or Entry) that stores:
		* Key: The object used to compute the hash.
		* Value: The object associated with the key.
		* Hash: An integer computed from the key’s hashCode() (usually processed further to reduce collisions).
		* Next: A pointer/reference linking to the next node in the bucket (for handling collisions via chaining).
		
		Starting from Java 8, if a single bucket’s linked list grows beyond a certain threshold (typically eight nodes), the linked list is replaced with a balanced binary search tree (red-black tree) to optimize performance in cases with many hash collisions.
		
	2. Hash Calculation and Bucket Indexing : When you add a key-value pair with put(key, value), the following steps occur:
		a) Hashing the Key: The key’s hashCode() is computed. To mitigate poor hash distributions (and thus collisions), Java applies a supplemental hash function that mixes the bits of the original hash code.
		b) Determining the Bucket Index: The processed hash is then used to determine the bucket index. This is done using a bitwise operation:
			index = (n - 1) & hash;
			Here, n is the current length of the bucket array. This operation is highly efficient and works best when n is a power of two (which is why the default capacity is 16).
			
	3. Handling Collisions : Collisions occur when multiple keys hash to the same bucket index. There are two common ways collisions are handled in a HashMap:
		* Chaining with Linked Lists: Initially, each bucket maintains a linked list of entries that have the same bucket index. When a new entry is inserted into a bucket, the HashMap traverses the list:
			- If an entry with an equal key (using equals()) is found, its value is updated.
			- Otherwise, the new entry is appended to the list.
		* Treeification (Post–Java 8): If the number of entries in a single bucket exceeds a threshold (typically 8), the linked list is converted into a red-black tree. This transformation keeps the performance closer to O(log n) for that bucket's operations, reducing the adverse effects of a poor hash distribution.
		
	4. Resizing and Load Factor : A HashMap grows dynamically to maintain its performance:
		* Load Factor: This is a measure (default is 0.75) that indicates how full the HashMap is allowed to get before its capacity is automatically increased. When the number of entries exceeds capacity × loadFactor, the HashMap is resized.
		* Resizing Process: When resizing, a new bucket array with a larger capacity (typically double the current capacity) is allocated, and all existing entries are rehashed—that is, redistributed into the new array based on their computed bucket index. This process, although time-consuming during the resize, ensures that the average-case operations remain efficient.
		
	5. Example Code : Below is a simple example that illustrates how a HashMap is used:
			import java.util.HashMap;
			import java.util.Map;

			public class HashMapExample {
				public static void main(String[] args) {
					// Create a new HashMap
					Map<String, Integer> scores = new HashMap<>();

					// Adding key-value pairs to the HashMap
					scores.put("Alice", 90);
					scores.put("Bob", 85);
					scores.put("Charlie", 95);

					// Retrieving a value
					System.out.println("Score of Alice: " + scores.get("Alice"));

					// Iterating over the HashMap entries
					for (Map.Entry<String, Integer> entry : scores.entrySet()) {
						System.out.println(entry.getKey() + " : " + entry.getValue());
					}
				}
			}
		Explanation of the Example:
			* Insertion: For each call to put(), the key (e.g., "Alice") is hashed, and its bucket index is calculated. The entry is then stored in the corresponding bucket. If the bucket already contains nodes (say, due to collisions), it either updates an existing key (if found) or appends to the chain.
			* Retrieval: When get("Alice") is called, the HashMap recomputes the hash for "Alice", determines the bucket, and traverses the list (or tree) in that bucket until it finds the entry with a key that equals "Alice".
			
	6. Summary :
		* Structure: Java HashMap uses an array of buckets, where each bucket contains a linked list (or tree) of entries.
		* Hashing: Key’s hash codes are computed and processed to uniformly distribute keys into buckets.
		* Collision Resolution: Uses chaining with linked lists; converts to red-black trees if collisions become intense.
		* Resizing: Occurs when entries exceed a calculated threshold based on the load factor, ensuring efficient performance.
		
	This detailed internal perspective not only explains how Java HashMap manages data but also highlights its built-in strategies to mitigate issues like collisions and to maintain performance during high load—concepts that could be quite useful, especially when exploring scalable system designs in larger distributed architectures.
==================================================================================================================================================================================

2) LinkedHashMap :
------------------
	LinkedHashMap is a specialized implementation of the Map interface in Java that not only provides fast O(1) average time performance (just like HashMap) for basic operations but also maintains a predictable iteration order. This ordering is achieved by maintaining a doubly-linked list running through all of its entries. Understanding its internal structure helps to appreciate how it preserves insertion or access order while still benefiting from hash-based lookups.
	
	Internal Structure of LinkedHashMap
		1. Inheritance and Node Structure
			- LinkedHashMap extends HashMap. This means that it inherits the hash table mechanism (with buckets, hashing, resizing, etc.) from HashMap. However, to maintain order, LinkedHashMap augments each hash table entry.
				Entry Nodes: Internally, the entries in HashMap are typically represented by an inner class called Node<K,V>. In LinkedHashMap, the equivalent is a static inner class (often named Entry<K,V>) that extends HashMap.Node<K,V>.
				
					static class Entry<K,V> extends HashMap.Node<K,V> {
						Entry<K,V> before, after; // Pointers to maintain the doubly-linked list

						Entry(int hash, K key, V value, HashMap.Node<K,V> next) {
							super(hash, key, value, next);
						}
					}

				As you can see, each entry now carries two additional references:
				 - before: Pointer to the previous entry in the linked list.
				 - after: Pointer to the next entry in the linked list.
				 
		2. Maintaining Order
			LinkedHashMap uses the linked list pointers to preserve one of two orders, determined by a flag set at construction:
				* Insertion Order: By default, LinkedHashMap maintains the order in which elements were inserted. Every time a new entry is added, it is appended at the end of the doubly-linked list.
				* Access Order: By passing an additional boolean flag (commonly called accessOrder) to the constructor and setting it to true, you instruct the map to reorder entries based on access. In this mode, every time an entry is retrieved using get() or updated via put(), it is moved to the tail of the list. This feature makes LinkedHashMap especially useful for building LRU (Least Recently Used) caches.
				
		3. How It Works in a Nutshell
			1) Hashing and Buckets: Just like a normal HashMap, LinkedHashMap computes a hash for each key and determines a bucket location in the underlying array.
			2) Entry Insertion: When you put a new key-value pair:
				- A new Entry is created.
				- This Entry is inserted into the appropriate bucket (following the rules of chaining in HashMap).
				- Simultaneously, the new entry is linked at the end of a doubly-linked list that maintains the overall order of entries.
			3) Iteration: When iterating over a LinkedHashMap (using methods like entrySet()), the iteration follows the linked list rather than the bucket order. This explains why you see a predictable order (insertion or access) regardless of the internal bucket structure.
			4) Reordering in Access Order Mode: With access order enabled, each time an entry is accessed:
				- The map moves that entry to the end (tail) of the linked list.
				- This ensures that the least recently accessed element is positioned at the head, which is particularly ideal for cache eviction policies.
				
		Detailed Example in Java : Let's put this into practice with examples.
			Example 1: Insertion Order
				In the default mode, LinkedHashMap maintains entries in the order they were added.

					import java.util.LinkedHashMap;
					import java.util.Map;

					public class LinkedHashMapInsertionOrderExample {
						public static void main(String[] args) {
							// Using the default constructor maintains insertion order.
							Map<String, Integer> map = new LinkedHashMap<>();

							map.put("apple", 1);
							map.put("banana", 2);
							map.put("orange", 3);
							map.put("grapes", 4);

							// Iteration follows the order of insertion.
							System.out.println("Insertion Order:");
							map.forEach((key, value) -> 
								System.out.println(key + " -> " + value)
							);
						}
					}
					
				What Happens Internally:
					* When "apple" is inserted, a new Entry is created and becomes the head of the linked list.
					* Each subsequent insert ("banana", "orange", "grapes") is linked to the previous entry via the after pointer.
					* Iteration simply follows the before/after links, hence preserving the original order
					
			Example 2: Access Order
				By specifying accessOrder = true, LinkedHashMap will reorder entries on access.
				
					import java.util.LinkedHashMap;
					import java.util.Map;

					public class LinkedHashMapAccessOrderExample {
						public static void main(String[] args) {
							// true enables access-order mode.
							Map<String, Integer> map = new LinkedHashMap<>(16, 0.75f, true);

							map.put("apple", 1);
							map.put("banana", 2);
							map.put("orange", 3);
							map.put("grapes", 4);

							// Access some entries to change their order
							map.get("banana");   // "banana" becomes the most recently accessed.
							map.get("apple");    // "apple" is now recently accessed.

							// Iteration will now reflect the access order.
							System.out.println("Access Order:");
							map.forEach((key, value) ->
								System.out.println(key + " -> " + value)
							);
						}
					}

				Internal Reordering:
					* When map.get("banana") is called, "banana" is unlinked from its current position and reinserted at the tail.
					* The same happens when "apple" is accessed.
					* On iteration, entries appear in the order of their most recent access.
					
		Visual Diagram of the Internal Structure
			Here's a simplified ASCII diagram of an insertion-ordered LinkedHashMap after inserting "apple", "banana", "orange", and "grapes":
				Head
				  |
				  V
				+---------+     +---------+     +---------+     +---------+
				| "apple" |<--->| "banana"|<--->| "orange"|<--->| "grapes"|
				+---------+     +---------+     +---------+     +---------+
				  ^
				  |
				Tail
			In access order mode, if "banana" and then "apple" are accessed, the list might be rearranged as follows:
				Head
				  |
				  V
				+---------+     +---------+     +---------+     +---------+
				| "orange"|<--->| "grapes"|<--->| "banana"|<--->| "apple" |
				+---------+     +---------+     +---------+     +---------+
				  ^
				  |
				Tail
		
		Conclusion
			LinkedHashMap skillfully combines the performance benefits of a hash table with the predictability of a linked list. Its internal structure—with nodes extending those in HashMap to include before and after pointers—ensures that you can iterate over the map in a controlled order while benefiting from constant-time average lookups. Whether you require plain insertion order or need a map that can support an LRU cache through access order, LinkedHashMap offers a flexible and powerful solution.
					
==================================================================================================================================================================================

2) TreeMap :
------------
	A TreeMap is an implementation of the Map interface that stores its entries in sorted order based on the keys. Internally, it uses a red-black tree, a kind of self-balancing binary search tree, to maintain order. This design ensures that common operations such as get(), put(), and remove() run in O(log n) time. Note that, unlike a HashMap, a TreeMap does not allow null keys (although null values are allowed) because the ordering must be defined for every key.
	
	Internal Structure of TreeMap :
		1. Red-Black Tree Fundamentals :
			A red-black tree is a binary search tree with the following properties that guarantee the tree remains balanced:
				- Node Color: Each node is colored either red or black.
				- Root Property: The root of the tree is always black.
				- Red Property: Red nodes cannot have red children. In other words, if a node is red, then both its children must be black.
				- Black Depth: Every path from a given node to any of its descendant leaves contains the same number of black nodes.
				- Leaf Nodes: The leaves (or null children) are considered black.
			These properties ensure that the longest path from the root to a leaf is no more than twice the length of the shortest path, providing logarithmic time performance for insertions and lookups.
			
		2. Internal Node Representation :
			In the source code of TreeMap, the internal nodes are typically represented by a static inner class often called Entry (sometimes just Node in simplified explanations). A typical node contains:
				* Key & Value: The key and its associated value.
				* Left and Right Child Pointers: Links to the left and right children in the tree.
				* Parent Pointer: A pointer to the parent node, which is especially useful during rebalancing.
				* Color: A flag (often a boolean or a field of an int/enum) indicating whether the node is red or black.
				
			Here’s a conceptual example of what the internal node structure might resemble:

				static final class Entry<K,V> implements Map.Entry<K,V> {
					K key;
					V value;
					Entry<K,V> left;
					Entry<K,V> right;
					Entry<K,V> parent;
					boolean color; // false for black, true for red

					Entry(K key, V value, Entry<K,V> parent) {
						this.key    = key;
						this.value  = value;
						this.parent = parent;
						this.color  = true; // new nodes are typically inserted as red
					}
					
					// Getter and setter for key, value, and helper methods can be here.
				}
				When a key-value pair is inserted, it is placed in the right position based on the key’s natural or comparator-provided ordering. Then, the tree might need to perform rotations and recoloring to restore red-black tree properties if they are violated.
			
		3. Insertion, Deletion, and Balancing
			Insertion (put()):
				1) Key Positioning: The tree is traversed (starting at the root) to find the correct spot for the new key. This traversal uses the key’s natural order or a custom comparator.
				2) Node Insertion: Once the correct spot is found, the new node is inserted. By default, new nodes are colored red.
				3) Fix-Up Phase: Since inserting a red node might violate the red-black properties (e.g., if the parent is also red), the tree performs a series of rotations (left or right) and recoloring steps. These operations ensure that the properties are restored and that the tree remains balanced.
			Deletion (remove()):
				1) Locate the Node: Similar to insertion, the tree is traversed to find the node corresponding to the key.
				2) Node Removal: The removal process is more complex than in a typical binary search tree because after deleting a node (or replacing its value), the red-black properties might be disturbed.
				3) Balancing After Removal: The tree again performs rotations and recolors nodes to restore balance. Because of the balanced nature of the red-black tree, these operations also run in O(log n) time.
				
		Example: Using TreeMap in Java
			Below is a complete Java program that demonstrates how to use a TreeMap. It shows insertion, lookup, iteration (which is in sorted order), and deletion operations.
			
				import java.util.TreeMap;

				public class TreeMapExample {
					public static void main(String[] args) {
						// Create a TreeMap that orders keys in natural order (Integer order in this case)
						TreeMap<Integer, String> treeMap = new TreeMap<>();
						
						// Inserting key-value pairs into the TreeMap
						treeMap.put(5, "Five");
						treeMap.put(1, "One");
						treeMap.put(3, "Three");
						treeMap.put(2, "Two");
						treeMap.put(4, "Four");
						
						// The TreeMap stores keys in sorted order;
						// Iterating will display keys in their natural ascending order.
						System.out.println("TreeMap contents (sorted by key):");
						treeMap.forEach((key, value) -> 
							System.out.println("Key: " + key + ", Value: " + value));
						
						// Retrieve a value with a specific key
						String value = treeMap.get(3);
						System.out.println("\nValue associated with key 3: " + value);
						
						// Remove an element from the TreeMap
						treeMap.remove(2);
						System.out.println("\nAfter removing key 2, TreeMap contents:");
						treeMap.forEach((key, v) -> 
							System.out.println("Key: " + key + ", Value: " + v));
					}
				}
				
			Explanation of the Code
				* Creation & Insertion: We create a TreeMap that orders keys naturally (for integers, this means in ascending order). Inserting elements follows the standard put() method. Internally, each insertion involves finding the right spot in the red-black tree and then rebalancing if needed.
				* Sorted Iteration: When iterating over the entries, the TreeMap traverses the red-black tree in-order, which results in keys being visited in sorted order.
				* Lookup and Deletion: The get() method searches for the key by traversing the tree, meaning it runs in O(log n) time. Deletion similarly handles rebalancing to maintain the integrity of the red-black tree.

		Additional Thoughts and Deepening the Conversation
			* Performance and Use-Cases: A TreeMap is ideal when you need a map that stays sorted at all times. However, because of the rebalancing overhead, its constant factors are typically higher than those of a HashMap for simple lookups. In many applications, the choice between a TreeMap and other map implementations depends on whether sorted order is required.
			* Comparator Customization: You can construct a TreeMap with a custom comparator if you need an alternate sort order for the keys. This can be useful when the natural ordering does not suit your problem domain.
			* Thread Safety: Like most Java collection classes (except for those in the java.util.concurrent package), TreeMap is not thread-safe. If you plan to use it in a multi-threaded context, you’ll need to synchronize access externally or look into concurrent alternatives.
			
==================================================================================================================================================================================

4) ConcurrentHashMap :
----------------------
	ConcurrentHashMap is designed for high concurrency with minimal locking, allowing multiple threads to read and update the map with little contention. Unlike a synchronized HashMap or even a Collections.synchronizedMap(), it doesn’t lock the entire map for most operations. Instead, it uses fine-grained locking and non-blocking algorithms (such as CAS—compare-and-swap) to achieve scalability.
	
	Internal Structure of ConcurrentHashMap (Java 8+)
		1. Underlying Data Structure :
			At its core, ConcurrentHashMap maintains a volatile array of nodes (often referenced as the table). Each element in this table references the head of a chain of nodes (linked list) that stores key–value pairs. In Java 8 and later, a basic internal node (often called Node<K,V>) has the following important fields:
			* Key & Value: The actual key–value pair.
			* Hash: A precomputed hash value to reduce recomputation (often using a “spread” function, for example:
					int h = key.hashCode();
					int hash = h ^ (h >>> 16);
					This serves to distribute hash codes evenly across the table.)
			* Next Pointer: A pointer to the next node in the bucket (if a collision occurs).
			This design is similar to the one used by the standard HashMap but with modifications that support concurrent updates.
			
		2. Locking & Synchronization :
			* Lock-free Reads: The get() operation in a ConcurrentHashMap is lock-free. Since the table is declared volatile, any thread reading from it sees a consistent view according to the Java Memory Model. This is a big win for performance under heavy read operations.
			* Fine-Grained Locking on Bins: When updates occur (like during put() or remove()), the algorithm first attempts to use CAS operations. For example, if a bucket is empty (null), a new node is installed using a CAS operation. If the bucket is not empty—i.e., there is a collision—the code synchronizes on the first node (the “bin head”) in that bucket. This ensures that modifications to that particular chain (or bin) are safe while leaving other bins free for other threads.
			
		3. Handling Collisions: Linked Lists and Tree Bins :
			* Linked List: If multiple keys hash to the same index, the nodes form a linked list. In a low-collision scenario, this list is short and traversal for reads is fast.
			* Tree Bins (Treeification): When the linked list in a bin becomes too long (beyond a threshold, typically around 8 elements), Java converts the list into a balanced tree (usually a red-black tree) to ensure that even in worst-case scenarios, the lookup time remains O(log n) rather than degrading to O(n). This “treeification” helps maintain performance in situations where many keys collide.
			
		4. Resizing and the Forwarding Mechanism
			* Concurrent Resizing: ConcurrentHashMap supports concurrent resizing. When the number of entries reaches a certain threshold (driven by a control variable commonly known as sizeCtl), the table doubles its size. Rather than doing a stop-the-world resize, multiple threads help in transferring data to the new table.
			* Forwarding Nodes: During resizing, once a bin’s contents have been moved to the new table, a special object called a forwarding node is inserted in the old bin. This node signals that the bin’s data has been transferred, so any thread that later inspects this bucket will help with or directly reference the new table. This cooperative mechanism minimizes contention during expansion and ensures consistency.
			
		Detailed Operational Flow
			* Reading (get()) 
				1) Hash Calculation: Compute the hash of the key using a “spread” function for a uniform distribution.
				2) Index Selection: Use the hash to select an index in the table.
				3) Traverse the Bucket: If the bucket is not null, traverse the linked list (or tree, if treeified) to find the key.
			Because the table and nodes are volatile (and updated via CAS), threads reading concurrently get a consistent view without heavy locking.
			
			* Insertion (put())
				1) Empty Bucket Insertion:
					* If the bucket is null, the thread attempts to set the new node using CAS.
				2) Collision Handling:
					* If the bucket already has elements, the thread will synchronize on the bin head and then traverse the chain:
						- If the key exists, its value is updated.
						- If not, a new node is appended to the chain.
				3) Treeification:
					* If a chain becomes too long, the bin is converted into a tree bin to keep lookup costs low.
				4) Resizing Coordination:
					* If the overall size hits the threshold, a resize is triggered. Threads then participate in transferring the nodes to the new table concurrently. The use of forwarding nodes ensures that other threads see the updated state even while resizing is in progress.
					
		Example: Using ConcurrentHashMap in a Multi-threaded Environment
			Below is a full Java example that demonstrates how to use ConcurrentHashMap in a situation where multiple threads are updating the map concurrently.

				import java.util.concurrent.*;
				import java.util.*;

				public class ConcurrentHashMapExample {
					public static void main(String[] args) throws InterruptedException {
						// Create a ConcurrentHashMap to be used by multiple threads.
						ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
						
						// Create an ExecutorService with a fixed thread pool.
						ExecutorService executor = Executors.newFixedThreadPool(4);

						// Submit tasks to insert key-value pairs into the map concurrently.
						for (int i = 0; i < 100; i++) {
							final int key = i;
							executor.submit(() -> {
								// Using put() which internally uses CAS and bin-level locking.
								map.put(key, "Value" + key);
								System.out.println(Thread.currentThread().getName() 
												   + " inserted (" + key + ", " + "Value" + key + ")");
							});
						}
						
						// Shut down the executor and wait for tasks to finish.
						executor.shutdown();
						executor.awaitTermination(1, TimeUnit.MINUTES);
						
						// Demonstrate safe concurrent iteration over the map.
						// Note: Iterators from ConcurrentHashMap are weakly consistent,
						// meaning they reflect the state of the map at some point during or after the creation of the iterator.
						map.forEach((k, v) -> System.out.println("Key: " + k + ", Value: " + v));
					}
				}
			Explanation of the Example
				* Concurrent Insertions: A fixed thread pool is created with four threads. Each thread inserts a unique key–value pair into the map. The internal workings of ConcurrentHashMap ensure that these insertions are thread-safe without a single global lock.
				* Iteration: After all insertions, the main thread iterates over the map. Even though the iteration is weakly consistent (it might not reflect the insertions in absolute real-time), it is safe for concurrent access.
				This example illustrates how different threads can simultaneously update the map while maintaining a consistent state.
				
			Takeaways and Further Thoughts :
				* High Performance, Low Contention: The use of fine-grained locking (bin-level locking), CAS operations, and lock-free reads make ConcurrentHashMap ideal for high-concurrency applications.
				* Adaptive Behavior: The design adapts by converting bucket chains to balanced trees when necessary, ensuring that even edge-case scenarios with many collisions are handled efficiently.
				* Resizing Without Downtime: The concurrent resizing mechanism—where threads cooperate to expand the map while preserving consistency—ensures that the map remains performant as it grows.
				
			Additional Considerations
				* Beyond simple get and put operations, ConcurrentHashMap provides a rich API (like computeIfAbsent, merge, and various bulk operations) that leverages its internal architecture for safe concurrent computations. This makes it an indispensable tool in modern, multithreaded Java applications.

				* If you’re thinking about system design where high availability and scalability are critical, understanding these internal mechanisms can help you decide when and how to use ConcurrentHashMap for handling shared mutable state in your applications.
				
======================================================================================================================================================================================