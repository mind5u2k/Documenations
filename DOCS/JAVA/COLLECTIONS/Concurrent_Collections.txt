Concurrent collections in Java are specialized data structures designed to handle concurrent access by multiple threads efficiently and safely. They are part of the java.util.concurrent package and are optimized for multithreaded environments.

Details of Concurrent Collections
	1) Thread-Safe: These collections ensure thread safety without requiring external synchronization mechanisms like synchronized blocks.
	2) Atomic Operations: They support atomic operations, reducing the risk of race conditions and data inconsistency.
	3) Performance: Concurrent collections are designed to provide better performance compared to traditional synchronized collections.

Types of Concurrent Collections:
1) ConcurrentHashMap: A thread-safe version of HashMap that allows concurrent access to different segments of the map.
	Example :
		ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
		map.put("Java", 1);
		map.put("Concurrency", 2);
		System.out.println(map.get("Java"));

2) CopyOnWriteArrayList: A thread-safe version of ArrayList that creates a new copy of the list for every modification.
	Example :
		CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();
		list.add("Java");
		list.add("Concurrency");
		for (String item : list) {
			System.out.println(item);
		}

3) BlockingQueue: A thread-safe queue that blocks threads when trying to add or remove elements under certain conditions.
	Example :
		BlockingQueue<String> queue = new ArrayBlockingQueue<>(10);
		queue.put("Java");
		System.out.println(queue.take());

4) ConcurrentLinkedQueue: A thread-safe queue based on linked nodes, ideal for high-performance scenarios.
	Example:
		ConcurrentLinkedQueue<String> queue = new ConcurrentLinkedQueue<>();
		queue.add("Java");
		System.out.println(queue.poll());
		
5) ConcurrentSkipListMap: A thread-safe map that maintains elements in sorted order.
	Example:
		ConcurrentSkipListMap<String, Integer> map = new ConcurrentSkipListMap<>();
		map.put("Java", 1);
		map.put("Concurrency", 2);
		System.out.println(map.firstKey());
		
6) ConcurrentLinkedDeque: A thread-safe double-ended queue for efficient insertion and removal at both ends.
	Example:
		ConcurrentLinkedDeque<String> deque = new ConcurrentLinkedDeque<>();
		deque.addFirst("Java");
		deque.addLast("Concurrency");
		System.out.println(deque.pollFirst());