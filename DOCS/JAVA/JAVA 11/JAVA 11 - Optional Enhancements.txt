4. Optional Enhancements
	Java's Optional was introduced in Java 8 to help developers avoid null checks and reduce the risk of running into NullPointerExceptions. With Java 11, the API received a neat little enhancement that improves its expressiveness and readability: the addition of the isEmpty() method. Although several useful methods such as ifPresentOrElse() and stream() were introduced in Java 9 to complement Optional, the single addition in Java 11—isEmpty()—is especially helpful in clarifying code logic.
	
	The isEmpty() Method
		Before Java 11, to check whether an Optional was empty, you typically had to write:
			if (!optional.isPresent()) {
				// handle empty value
			}			
		This pattern, while effective, can feel a bit clunky. In Java 11, you can simply write:

			if (optional.isEmpty()) {
				// handle empty value
			}
		This small change has a big impact on code readability—it directly communicates that there is no value present without the cognitive overhead of negating isPresent(). This enhances clarity, especially in complex conditional statements.
		
	A Detailed Example
		Let’s see how you can use these Optional enhancements, along with other common methods (ifPresentOrElse and stream(), which—although introduced in earlier versions—integrate very naturally with the Java 11 style).
		
			import java.util.Optional;

			public class OptionalEnhancementsExample {
				public static void main(String[] args) {
					// Create an Optional with a non-null value
					Optional<String> optionalValue = Optional.of("Hello, Java 11 Optional!");
					// Create an empty Optional
					Optional<String> emptyOptional = Optional.empty();

					// Using isEmpty() to check if an Optional has no value
					if (emptyOptional.isEmpty()) {
						System.out.println("emptyOptional is empty!");
					} else {
						System.out.println("emptyOptional contains: " + emptyOptional.get());
					}

					// Using ifPresentOrElse() to handle both cases in a single, cohesive block
					optionalValue.ifPresentOrElse(
						value -> System.out.println("Found value: " + value),
						() -> System.out.println("No value present!")
					);

					// Converting an Optional to a Stream for further processing.
					// This is especially useful when you need to chain Optional values in a Stream pipeline.
					optionalValue.stream()
						.map(String::toUpperCase)
						.forEach(System.out::println);
				}
			}
		
		Explanation of the Code
			1) Creation of Optional Values: We start with two Optional instances—one containing a non-null string and the other created as empty.
			2) Using isEmpty(): Instead of negating isPresent(), isEmpty() directly checks if no value is present, which makes the conditional statement more intuitive.
			3) ifPresentOrElse(): This method takes a consumer for the present value and a runnable for the empty case. It ensures both scenarios are handled without splitting the logic into separate if-else blocks.
			4) Stream Conversion: Converting an Optional to a Stream lets you integrate it directly into stream pipelines. If the optional contains a value, the stream will contain one element; otherwise, it will be empty. This is a concise way to handle optional values when dealing with collections or when further transformation is needed.
			
		Benefits of These Enhancements
			1) Improved Readability: Using isEmpty() makes it immediately clear what the intention is—as opposed to reading a negated condition.
			2) Conciseness: Methods like ifPresentOrElse() reduce boilerplate by combining two logical branches into one method call.
			3) Seamless Integration with Functional Programming: With the ability to convert Optional to a Stream, you can easily integrate Optional logic into more complex data processing pipelines without verbose null checks.
			
====================================================================================================================================================================================