Spring REST - Exception Handling
-------------------------------- 

	REST Client -> API Request with bad data -> REST Service -> Throw Exception -> Exception Handler -> JSON response from Exception Handler
	
	Development Process :
		1) Create a custom error response class
			* The custom error response class will be sent back to client as JSON
			* We will define as Java class (POJO)
			* Jackson will handle converting it to JSON.
			
					package com.luv2code.demo.rest;
					public class StudentErrorResponse {
						private int status;
						private String message;
						private long timeStamp;
						
						public StudentErrorResponse() {	}

						public StudentErrorResponse(int status, String message, long timeStamp) {
							this.status = status;
							this.message = message;
							this.timeStamp = timeStamp;
						}
						public int getStatus() {
							return status;
						}
						public void setStatus(int status) {
							this.status = status;
						}
						public String getMessage() {
							return message;
						}
						public void setMessage(String message) {
							this.message = message;
						}
						public long getTimeStamp() {
							return timeStamp;
						}
						public void setTimeStamp(long timeStamp) {
							this.timeStamp = timeStamp;
						}
					}			
		2) Create a custom exception class
			* The custom student exception will used by our REST service.
			* In our code, if we can't find student, then we'll throw an exception.
			* Need to define a custom student exception class (e.g., StudentNotFoundException)
			
					public class StudentNotFoundException extends RuntimeException {
						public StudentNotFoundException(String message) {
							super(message);
						}
						public StudentNotFoundException(String message, Throwable cause) {
							super(message, cause);
						}
						public StudentNotFoundException(Throwable cause) {
							super(cause);
						}
					}
			
		3) Update REST service to throw exception is student not found

					@GetMapping("/students/{studentId}")
					public Student getStudent(@PathVariable int studentId) {
						// just index into the list ... keep it simple for now
						// check the studentId again list size
						if ( (studentId >= theStudents.size()) || (studentId < 0)) {
							throw new StudentNotFoundException("Student id not found - " + studentId);
						}
						return theStudents.get(studentId);
					}
		
		4) Add and exception handler method using @ExceptionHandler
			* Define exception handler method(s) with @ExceptionHandler annotation
			* Exception handler will return a ResponseEntity
			* ResponseEntity is a wrapper for the HTTP response object.
			* ResponseEntity provides fine-grained control to specity.
				- HTTP status code, HTTP headers and Response body
				
					@ExceptionHandler
					public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc) {
						// create a StudentErrorResponse
						StudentErrorResponse error = new StudentErrorResponse();
						error.setStatus(HttpStatus.NOT_FOUND.value());
						error.setMessage(exc.getMessage());
						error.setTimeStamp(System.currentTimeMillis());
						// return ResponseEntity
						return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
					}
					
					@ExceptionHandler
					public ResponseEntity<StudentErrorResponse> handleException(Exception exc) {

						// create a StudentErrorResponse
						StudentErrorResponse error = new StudentErrorResponse();

						error.setStatus(HttpStatus.BAD_REQUEST.value());
						error.setMessage(exc.getMessage());
						error.setTimeStamp(System.currentTimeMillis());

						// return ResponseEntity
						return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
					}
===================================================================================================================================================================

Spring REST - Global Exception Handling
--------------------------------------- 
	* Exception handler code is only for the specific REST Controller
	* Can't be reused by other controller 
	* We need global exception handlers
		- Promotes reused
		- Centralizes exception handling
		
	Spring @ControllerAdvice
		* @ControllerAdvice is similar to and interceptor/filter.
		* Pre-process requests to controllers
		* Post-process response to handle exceptions
		* Perfect for global exception handling
		
	REST Client -> API Request with bad data -> ControllerAdvice -> REST Service -> Throw Exception -> ControllerAdvice ->Exception Handler -> JSON response from Exception Handler
	
	Development Process
		1) Create new @ControllerAdvice

				@ControllerAdvice
				public class StudentRestExceptionHandler {
					// add exception handling code here
					@ExceptionHandler
					public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc) {
						// create a StudentErrorResponse
						StudentErrorResponse error = new StudentErrorResponse();
						error.setStatus(HttpStatus.NOT_FOUND.value());
						error.setMessage(exc.getMessage());
						error.setTimeStamp(System.currentTimeMillis());
						// return ResponseEntity
						return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
					}
					// add another exception handler ... to catch any exception (catch all)
					@ExceptionHandler
					public ResponseEntity<StudentErrorResponse> handleException(Exception exc) {
						// create a StudentErrorResponse
						StudentErrorResponse error = new StudentErrorResponse();
						error.setStatus(HttpStatus.BAD_REQUEST.value());
						error.setMessage(exc.getMessage());
						error.setTimeStamp(System.currentTimeMillis());
						// return ResponseEntity
						return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
					}
				}

		2) Refactor REST Service ... remove Exception handling code
		3) Add exception handling code to @ControllerAdvice
		