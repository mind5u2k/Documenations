I am 𝗵𝗶𝗿𝗶𝗻𝗴 you as a 𝗦𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿 if you can answer these 30 questions:

𝗝𝗮𝘃𝗮 𝗮𝗻𝗱 𝗦𝗽𝗿𝗶𝗻𝗴 𝗕𝗼𝗼𝘁 (𝗕𝗮𝗰𝗸-𝗘𝗻𝗱)
 - What is the difference between ArrayList and LinkedList in Java?
 - Explain the difference between HashMap and ConcurrentHashMap.
 - What are Java Streams, and how do they work?
 - What is Spring Boot, and why is it popular?
 - What are the different bean scopes in Spring Boot?
	Spring Boot provides several bean scopes that define the lifecycle and visibility of a bean within the application context. Here are the most commonly used scopes:
	1) Singleton (Default Scope):
		- Ensures that only one instance of the bean is created per Spring context.
		- This is the default scope in Spring Boot.
	2) Prototype:
		- Creates a new instance of the bean every time it is requested from the Spring context.
	3) Request:
		- A new bean instance is created for each HTTP request.
		- Commonly used in web applications.
	4) Session:
		- A bean instance is created for each HTTP session.
		- It is shared across all requests within the same session.
	5) Global Session:
		- Used in portlet-based applications (rarely used these days).
		- Provides one instance per global HTTP session.
	6) Application:
		- A single instance of the bean is created for the entire ServletContext.
		
 - Explain the difference between @RestController and @Controller in Spring Boot.
 
 - What is dependency injection, and how does Spring Boot handle it?

𝗝𝗮𝘃𝗮𝗦𝗰𝗿𝗶𝗽𝘁 𝗮𝗻𝗱 𝗥𝗲𝗮𝗰𝘁.𝗷𝘀 (𝗙𝗿𝗼𝗻𝘁-𝗘𝗻𝗱)
 - What is the difference between var, let, and const in JavaScript?
 - How does the JavaScript event loop work?
 - Explain closures in JavaScript with an example.
 - What are promises, and how do they differ from async/await?
 - What is the difference between shallow and deep copying in JavaScript?
 - Explain the difference between == and === in JavaScript.
 - What is the virtual DOM, and how does React use it?
 - Explain the purpose of React hooks. How does useEffect work?
 - What is the difference between controlled and uncontrolled components in React?
 - What is the significance of key props in React lists?

𝗡𝗼𝗱𝗲.𝗷𝘀 𝗮𝗻𝗱 𝗕𝗮𝗰𝗸𝗲𝗻𝗱 𝗗𝗲𝘃𝗲𝗹𝗼𝗽𝗺𝗲𝗻𝘁
 - What is event-driven architecture in Node.js?
 - How does Node.js handle asynchronous operations?
 - What are middleware functions in Express.js?
 - What is the difference between a REST API and GraphQL?
 - How does authentication work in Node.js? Explain JWT vs. OAuth.
 - What are WebSockets, and when would you use them?
 - What is the difference between monolithic and microservices architecture?
 - How does Node.js handle memory management?

𝗗𝗮𝘁𝗮𝗯𝗮𝘀𝗲𝘀 𝗮𝗻𝗱 𝗦𝘆𝘀𝘁𝗲𝗺 𝗗𝗲𝘀𝗶𝗴𝗻
 - What is the difference between SQL and NoSQL databases?
 - How does indexing work in databases?
 - What are ACID properties in a database?
 - How would you scale an API to handle millions of requests per second?
 - What is caching, and how does it improve performance?

𝗡𝗼𝘁𝗲: These are important theoretical questions, but just knowing theory won’t get you hired.
 - Write code, build real projects
 - Work on problem-solving & DSA

𝗠𝘆 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗣𝗿𝗲𝗽𝗮𝗿𝗮𝘁𝗶𝗼𝗻 𝗞𝗜𝗧 𝘄𝗶𝗹𝗹 𝗵𝗲𝗹𝗽 𝘆𝗼𝘂 𝘄𝗶𝘁𝗵:
 - Four step roadmap (If your interview is in 15 Days) 
 - Understand System Design from Basic to Advance
 - 50 Detailed Q&A for LLD and HLD
 
 
 
 Requirement - A web page for Displatying Bank Statement 
 Constrains: 
 1. Volumetrics are not known 
 2. Authorizationa nd Authenticattion - zero trust 
 3. Enterprize data is stored on premises within mainframe 
 4. Application(new) will be deployed over AWS Cloud
 
 Given your requirements and constraints, here's a proposed solution for designing a web page to display bank statements:

Solution Design
Architecture Overview

Frontend: React JS for dynamic UI rendering and responsiveness. It integrates seamlessly with AWS services.

Backend: Java (Spring Boot) microservices hosted on AWS Lambda for scalability and low operational costs.

Authorization and Authentication: Implement Zero Trust architecture using AWS Cognito or a custom solution with OAuth 2.0 and JWT.

Data Layer: Establish secure communication with the on-premise mainframe (enterprise data) using APIs with encrypted transmission (TLS).

Cloud Deployment: Use AWS services like EC2 (to host the application if necessary), S3 (for static assets), and API Gateway (for secure API calls).

Key Features to Address Constraints Volumetrics Unknown:

Design for scalability using AWS auto-scaling features.

Implement caching strategies (e.g., AWS ElastiCache) for frequently accessed data to reduce mainframe load.

Use S3 for storing and managing static content, ensuring high availability.

Authorization and Authentication - Zero Trust:

Leverage MFA (Multi-Factor Authentication) to ensure secure user access.

Apply granular role-based access controls (RBAC).

Conduct continuous monitoring with AWS CloudTrail and Config.

Enterprise Data on Mainframe:

Use data adapters or middleware for seamless integration with mainframe systems.

Implement strict data encryption standards for communication (e.g., AES-256).

Explore hybrid architectures like AWS Outposts if deeper on-premises integrations are needed.

AWS Cloud Deployment:

Deploy frontend assets in AWS S3 with CloudFront for secure, global content delivery.

Manage backend workloads using AWS Lambda functions with API Gateway integration.

Enable monitoring using AWS CloudWatch for real-time metrics and alerting.

Web Page Functionalities

Interactive UI: Enable features like search, filter, and sort to navigate statements easily.

Secure Access: Authentication via user login with MFA.

Data Visualization: Utilize charts or graphs for summarizing statement data.

Download Options: Allow users to download statements in formats like PDF/CSV.

Error Handling: Informative error messages for failed API requests or connectivity issues.

Additional Considerations
Perform load and penetration testing to address volumetrics unpredictability.

Maintain compliance with data security standards like GDPR or ISO 27001 (if applicable).


----------------------------------------------------------------------------

In a React Frontend L2 round the following question was asked from interviewer.

💠 What security features should be taken while designing API's?
💠 What is API throttling?
💠 How to improve the performance in React Application?
💠 What is debouncing in React?
💠 What if in a react app we need to develop a feature of auto save the inputs of a form?
💠 Which react library is used to represent JSON data into charts, graphs, etc for better visualization and performance?
💠 If you have to inform the backend developers about some API's are failing how will you do that?
💠 Which tool is used to improve code standards in react application to show warnings for developers?
💠 What are the unit testing tools used in React Application?
💠 How do you handle API test case scenarios in React Application?
💠 Give me a estimation of completing a auto save functionality with unit testing including?
💠 Which cloud is used in your app development?


𝗩𝗶𝗿𝘁𝘂𝗮𝗹 𝗗𝗢𝗠 𝗮𝗻𝗱 𝗥𝗲𝗻𝗱𝗲𝗿𝗶𝗻𝗴

 1. What is the Virtual DOM, and how does it work
 2. Why is the Virtual DOM faster than the real DOM
 3. What is reconciliation in React, and how does it optimize performance
 4. How does React decide when to re-render a component
 5. What are key props in React, and why are they important
 6. How can you prevent unnecessary re-renders in React
 7. What is React.memo, and how does it optimize performance
 8. What is the difference between PureComponent and React.memo
 9. What are synthetic events in React, and how do they work
 10. What are the common performance issues in React and how to fix them

𝗖𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁 𝗟𝗶𝗳𝗲𝗰𝘆𝗰𝗹𝗲

 11. What are the different phases of the React component lifecycle
 12. What is the difference between mounting, updating, and unmounting in React
 13. What lifecycle methods are available in class components
 14. What is the difference between componentDidMount, componentDidUpdate, and componentWillUnmount
 15. How do lifecycle methods compare to useEffect in functional components
 16. How does React handle cleanup when a component unmounts
 17. What is the role of shouldComponentUpdate in class components
 18. What are the side effects in React, and how should they be managed
 19. How does error handling work in React components
 20. What is getDerivedStateFromProps, and when should it be used

𝗥𝗲𝗮𝗰𝘁 𝗛𝗼𝗼𝗸𝘀

21. What are React Hooks, and why were they introduced
22. What is useState, and how does it work
23. What is useEffect, and what are its common use cases
24. What is the difference between useEffect and lifecycle methods in class components
25. What is useRef, and how does it help manage DOM elements
26. What is useMemo, and how does it optimize performance
27. What is useCallback, and how does it prevent unnecessary re-renders
28. What is useContext, and how does it simplify prop drilling
29. What is useReducer, and when should you use it instead of useState
30. What are custom hooks, and how can they be useful

𝗦𝘁𝗮𝘁𝗲 𝗠𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁 𝗶𝗻 𝗥𝗲𝗮𝗰𝘁
31. What is the difference between controlled and uncontrolled components
32. How does state management work in React without external libraries
33. What is Context API, and how does it help manage global state
34. What are the advantages and limitations of using Context API
36. What is the difference between Redux and Context API
37. What is Recoil, and how does it compare to Redux
38. What is Zustand, and how does it simplify state management