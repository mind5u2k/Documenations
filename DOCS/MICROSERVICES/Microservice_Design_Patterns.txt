Microservices design patterns are architectural approaches that address common challenges in building, managing, and deploying microservices. 
Here are some key patterns along with examples:

1. API Gateway Pattern
	Description: Acts as a single entry point for clients to interact with multiple microservices. It handles requests, authentication, load balancing, and even response transformation.
	Details of the API Gateway Pattern:
		a)Centralized Entry Point: The API Gateway serves as a mediator between clients and microservices, routing requests to the appropriate service.
		b)Cross-Cutting Concerns: It handles tasks like authentication, load balancing, caching, and monitoring.
		c)Request Transformation: Modifies incoming requests and outgoing responses to meet client requirements.
		d)Security: Protects backend services by hiding their details and enforcing security measures.
	Example: Imagine an e-commerce application:
		Clients (mobile apps, web browsers) send requests to the API Gateway.
		The API Gateway routes requests to microservices like "Product Service," "Order Service," and "Payment Service."
		It handles authentication, rate limiting, and caching to optimize performance.
	How to Implement an API Gateway
		1) Choose a Framework or Tool:
			Popular options include Spring Cloud Gateway, Kong, and AWS API Gateway.
		2) Set Up Routing:
			Define routes to map client requests to specific microservices.
			Example in Spring Cloud Gateway:
				@Bean
				public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {
					return builder.routes()
						.route("product_service", r -> r.path("/products/**")
							.uri("http://localhost:8081"))
						.route("order_service", r -> r.path("/orders/**")
							.uri("http://localhost:8082"))
						.build();
				}
		3) Integrate Authentication:
			Use OAuth2 or JWT for secure access control.
		4) Enable Load Balancing:
			Configure load balancing to distribute requests across multiple instances of microservices.
		5) Monitor and Log:
			Implement logging and monitoring tools like ELK Stack or Prometheus.
		6) Optimize Performance:
			Use caching for frequently accessed data and rate limiting to prevent abuse.
			
	Reverse Proxy :- A reverse proxy is a server that sits between client applications (e.g., browsers, mobile apps) and backend services (e.g., microservices). It forwards client requests to the appropriate backend service and returns the response to the client. In a microservices architecture, a reverse proxy is commonly used to simplify communication, enhance security, and improve scalability.
	Key Features of a Reverse Proxy
		1) Routing: Directs incoming requests to the appropriate microservice based on the URL path or other criteria.
		2) Load Balancing: Distributes traffic across multiple instances of a microservice to ensure high availability and scalability.
		3) Security: Hides the internal architecture of the system and provides features like SSL termination and request filtering.
		4) Centralized Access: Exposes multiple microservices through a single entry point, simplifying client interactions.
		5) Caching: Stores frequently accessed responses to reduce load on backend services.
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Database per Service Pattern
	Description: Each microservice has its own database to ensure loose coupling and autonomy.
	Example: An e-commerce application can have separate databases for its Order Service, Inventory Service, and Payment Service, ensuring changes to one database don't impact others.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Service Discovery Pattern
	Description: Microservices dynamically discover the network locations of other services using a registry.
	Example: Netflix Eureka helps microservices register themselves and discover other services at runtime.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Event-Driven Pattern
	Description: Uses an event broker to facilitate asynchronous communication between microservices.
	Example: A stock trading platform can use Apache Kafka to publish "trade completed" events that trigger downstream services like Portfolio Service and Notification Service.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Circuit Breaker Pattern
	Description: Prevents cascading failures by stopping calls to an unresponsive service.
	Example: Netflix's Hystrix library implements circuit breakers to ensure that failures in one service don't bring down the entire application.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Saga Pattern
	Description: Manages distributed transactions by breaking them into a sequence of smaller, independent transactions.
	Example: In a travel booking app, a saga ensures that flight booking, hotel reservation, and car rental processes are either all successful or rolled back if any fail.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Strangler Pattern
	Description: Gradually migrates a monolithic application to microservices by incrementally replacing functionality.
	Example: A legacy billing system might start by redirecting the "invoices" module to a new microservice while the rest of the system runs as a monolith.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. CQRS (Command Query Responsibility Segregation)
	The CQRS (Command Query Responsibility Segregation) pattern is a design pattern used in microservices to separate the read and write operations into different models. This separation allows for better scalability, performance, and maintainability in distributed systems. It is particularly useful in systems with complex business logic or high read/write loads.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. Reactive Programming
	Reactive Programming is a programming paradigm focused on handling asynchronous data streams and propagating changes efficiently. It is particularly useful in microservices architectures, where systems need to handle high concurrency, scalability, and resilience. Reactive programming enables microservices to respond to events in real-time, making them more responsive and resource-efficient.Reactive Programming is a programming paradigm focused on handling asynchronous data streams and propagating changes efficiently. It is particularly useful in microservices architectures, where systems need to handle high concurrency, scalability, and resilience. Reactive programming enables microservices to respond to events in real-time, making them more responsive and resource-efficient.
	
	Key Principles of Reactive Programming
		1) Asynchronous: Non-blocking operations allow better utilization of resources.
		2) Event-Driven: Microservices react to events as they occur, rather than polling for updates.
		3) Backpressure: Controls the flow of data to prevent overwhelming consumers.
		4) Resilience: Isolates failures and ensures graceful recovery.
		5) Scalability: Handles high concurrency with fewer threads.
		
	Reactive Programming in Microservices
		In a microservices architecture, reactive programming is used to build systems that are:
			1) Responsive: Quick to react to user requests.
			2) Resilient: Capable of recovering from failures.
			3) Elastic: Scalable to handle varying loads.
		Using Reactive Programming, these services can communicate asynchronously, ensuring responsiveness even under heavy load.
	
	Implementation Example: Using Spring WebFlux
	
	Spring WebFlux is a reactive framework built on Project Reactor. Here's an example of implementing reactive microservices:
	Step 1: User Service - The User Service fetches user details reactively.
		@RestController
		@RequestMapping("/users")
		public class UserController {

			private final Map<String, User> users = new ConcurrentHashMap<>();

			@GetMapping("/{id}")
			public Mono<User> getUserById(@PathVariable String id) {
				return Mono.justOrEmpty(users.get(id)); // Reactive Mono for single value
			}

			@PostMapping
			public Mono<User> createUser(@RequestBody User user) {
				users.put(user.getId(), user);
				return Mono.just(user); // Reactive Mono for single value
			}
		}
	Step 2: Order Service - The Order Service fetches user details and processes orders reactively.
		@RestController
		@RequestMapping("/orders")
		public class OrderController {

			private final WebClient webClient;

			public OrderController(WebClient.Builder webClientBuilder) {
				this.webClient = webClientBuilder.baseUrl("http://localhost:8080/users").build();
			}

			@PostMapping
			public Mono<Order> createOrder(@RequestParam String userId, @RequestBody Order order) {
				return webClient.get()
						.uri("/{id}", userId)
						.retrieve()
						.bodyToMono(User.class) // Fetch user details reactively
						.flatMap(user -> {
							order.setUser(user);
							return Mono.just(order); // Process order reactively
						});
			}
		}
	Step 3: Product Service - The Product Service handles product catalog reactively.
		@RestController
		@RequestMapping("/products")
		public class ProductController {

			private final Map<String, Product> products = new ConcurrentHashMap<>();

			@GetMapping("/{id}")
			public Mono<Product> getProductById(@PathVariable String id) {
				return Mono.justOrEmpty(products.get(id)); // Reactive Mono for single value
			}

			@PostMapping
			public Mono<Product> createProduct(@RequestBody Product product) {
				products.put(product.getId(), product);
				return Mono.just(product); // Reactive Mono for single value
			}
		}
	Benefits of Reactive Programming in Microservices
		1) Improved Responsiveness: Handles requests asynchronously, ensuring quick responses.
		2) Better Resource Utilization: Non-blocking operations reduce thread usage.
		3) Resilience: Isolates failures and ensures graceful degradation.
		4) Scalability: Handles high concurrency efficiently.
		
	Best Practices
		1) Use Reactive Libraries: Use frameworks like Spring WebFlux, Project Reactor, or RxJava.
		2) Handle Backpressure: Implement mechanisms to control data flow between services.
		3) Centralized Monitoring: Use tools like Prometheus and Grafana for observability.
		4) Graceful Error Handling: Use fallback mechanisms (e.g., Resilience4j) to handle failures.
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10) CAP Theorem
	The CAP Theorem, also known as Brewer's Theorem, is a fundamental principle in distributed systems. It states that a distributed system can guarantee at most two out of three properties simultaneously:
	1) Consistency (C):
		- Ensures that all nodes in the system have the same data at the same time.
		- Example: If a user updates their profile, all nodes reflect the updated profile immediately.
	2) Availability (A):
		- Guarantees that every request receives a response, even if some nodes are down.
		- Example: A system responds to a query, even if it provides slightly outdated data.
	3) Partition Tolerance (P):
		- Ensures the system continues to operate despite network partitions (communication failures between nodes).
		- Example: If a network link between two data centers fails, the system still functions.
	
	CAP Theorem in Microservices
		In a microservices architecture, services are distributed across multiple nodes or regions. The CAP theorem helps architects make trade-offs between Consistency, Availability, and Partition Tolerance based on the application's requirements.
	
		Trade-Offs in Microservices
			1) CP (Consistency + Partition Tolerance):
				- Sacrifices availability during network partitions.
				- Example: A financial system (e.g., a banking app) prioritizes consistency to ensure accurate transactions, even if some requests fail during a partition.
			2) AP (Availability + Partition Tolerance):
				- Sacrifices consistency during network partitions.
				- Example: A social media feed prioritizes availability, allowing users to see posts even if some are slightly outdated.
			3) CA (Consistency + Availability):
				- Cannot tolerate network partitions, which is unrealistic in distributed systems.
				- Example: Centralized systems (not distributed) can achieve CA but are not fault-tolerant.
		
		Example: E-Commerce Microservices
		Consider an e-commerce application with the following microservices:
			1) Inventory Service: Tracks product stock.
			2) Order Service: Processes customer orders.
			3) Payment Service: Handles payments.
			
		Scenario: Network Partition - A network partition occurs between the Inventory Service and the Order Service.
		Trade-Offs:
			1) Consistency (CP):
				- The system ensures that the inventory is updated accurately before processing an order.
				- During the partition, the Order Service may reject requests to maintain consistency.
				- Use Case: Critical for financial transactions or stock management.
			2) Availability (AP):
				- The system allows the Order Service to process orders, even if the inventory data is outdated.
				- Once the partition is resolved, the Inventory Service reconciles the stock.
				- Use Case: Suitable for user-facing systems where availability is more important than immediate consistency.
			3) Partition Tolerance (Always Present):
				- The system continues to function despite the partition, but it must choose between consistency and availability.
				
	Implementation in Microservices
		1) Consistency Example:
			- Use a distributed database like MongoDB configured for strong consistency.
			- Implement two-phase commit or Saga patterns to ensure data consistency across services.
		2) Availability Example:
			- Use Cassandra or DynamoDB, which prioritize availability and eventual consistency.
			- Implement eventual consistency where services reconcile data asynchronously.
		3) Partition Tolerance:
			- Always design microservices to tolerate network partitions using techniques like message queues (e.g., Kafka, RabbitMQ) to handle asynchronous communication.
			
	Key Takeaways
		1) CAP Theorem is a guiding principle for designing distributed systems, including microservices.
		2) Microservices must make trade-offs between Consistency and Availability during network partitions.
		3) The choice depends on the application's requirements:
			- CP for critical systems (e.g., banking, inventory).
			- AP for user-facing systems (e.g., social media, e-commerce).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11) Orchestration and Choreography
	In a microservices architecture, orchestration and choreography are two approaches to managing interactions and workflows between services. Both have distinct philosophies and use cases, and the choice between them depends on the system's requirements.
	
	1. Orchestration : Orchestration involves a centralized controller (orchestrator) that manages and coordinates interactions between microservices. The orchestrator determines the sequence of actions and ensures that each service performs its task in the correct order.

	Key Characteristics:
		1) Centralized Control: A single orchestrator (e.g., Camunda, Apache Airflow) oversees the workflow.
		2) Explicit Workflow: The orchestrator defines the sequence of service calls.
		3) Simplified Debugging: Easier to monitor and debug since the orchestrator logs all interactions.
	Example: 
		Imagine an Order Processing System:
		1) Order Service receives an order.
		2) The orchestrator calls the Inventory Service to check stock.
		3) If stock is available, the orchestrator calls the Payment Service to process payment.
		Finally, the orchestrator calls the Shipping Service to dispatch the order.
	Implementation:
			public class OrderOrchestrator {
				public void processOrder(Order order) {
					boolean stockAvailable = inventoryService.checkStock(order.getProductId());
					if (stockAvailable) {
						boolean paymentSuccess = paymentService.processPayment(order.getPaymentDetails());
						if (paymentSuccess) {
							shippingService.dispatchOrder(order);
						}
					}
				}
			}

	2. Choreography : Choreography is a decentralized approach where microservices communicate directly with each other using events. Each service listens for events and reacts accordingly, without a central controller.
	
	Key Characteristics:
		1) Decentralized Control: Services interact independently, often using an event bus (e.g., Kafka, RabbitMQ).
		2) Event-Driven: Services publish and subscribe to events.
		3) Loose Coupling: Services are loosely coupled, making the system more resilient.
	Example:
		Imagine the same Order Processing System:
		1) Order Service publishes an OrderCreated event.
		2) Inventory Service listens for the event and checks stock. If stock is available, it publishes a StockConfirmed event.
		3) Payment Service listens for StockConfirmed and processes payment. If successful, it publishes a PaymentProcessed event.
		4) Shipping Service listens for PaymentProcessed and dispatches the order.
	Implementation: 
		public class InventoryService {
			@EventListener
			public void onOrderCreated(OrderCreatedEvent event) {
				boolean stockAvailable = checkStock(event.getProductId());
				if (stockAvailable) {
					eventBus.publish(new StockConfirmedEvent(event.getOrderId()));
				}
			}
		}
		
		+-----------------------------------------------------------------------------------------------------------------------------------+
		|													Comparison																		|
		+---------------------------+---------------------------------------------------+---------------------------------------------------+
		| Feature					|	Orchestration									| Choreography										|
		+---------------------------+---------------------------------------------------+---------------------------------------------------+
		| Control					|	Centralized (orchestrator manages workflow).	| Decentralized (services react to events).			|
		| Workflow Definition		|	Explicitly defined by the orchestrator.			| Emergent behavior based on events.				|
		| Coupling					|	Tighter coupling due to central control.		| Looser coupling between services.					|
		| Scalability				|	May become a bottleneck at the orchestrator.	| Highly scalable due to decentralized nature.		|
		| Debugging					|	Easier to debug (centralized logs).				| Harder to debug (distributed logs).				|
		| Resilience				|	Orchestrator failure affects the system.		| More resilient to individual service failures.	|
		+-----------------------------------------------------------------------------------------------------------------------------------+
		
	When to Use Which
		1) Orchestration:
			- Use when workflows are complex and require strict control.
			- Ideal for systems where monitoring and debugging are critical.
			- Example: Business Process Management (BPM) systems.
		2) Choreography:
			- Use for systems with high scalability and loose coupling.
			- Ideal for event-driven architectures.
			- Example: Real-time analytics, IoT systems.