Docker Introduction :
---------------------
	* Docker is a software development platoform to deploy apps
	* Apps are packaged in containers that can be run on any OS
	* Apps run the same, reagardless of where they're run
		- Any machine
		- No compatibility issues
		- Predictable behavior
		- Less Work
		- Easier to maintain and deploy
		- Works with any language, any OS, any technology
	* Use cases : microservices architecture, life-and-shift apps from on-premises to the AWS cloud,..
	
Docker on as OS :
-----------------
	* (++++++++++ Image ++++++++++++)
	

Where are Docker images stored ?
	* Docker images are stored in docker Repositories.
	* Docker Hub (http://hub.docker.com)
		- Public repository
		- Find base images for many technologies or OS(e.g., Ubuntu, MySQL, ...)
	* Amazon ECR (Amazon Elastic Container Registry)
		- Private repository
		- Public repository (Amazon ECR Public Gallery https://gallery.ecr.aws)
		
Docker versus Virtual Machines
	* Docker is "sort of" a virtualization technology, but not exactly
	* Resources are shared with the host => many containers on one server
	* (++++++++++ Image ++++++++++++)
	
Getting Started with Docker
	* (++++++++++ Image ++++++++++++)
	
--------------------------------------------------------------
Docker containers Management on AWS
	* Amazon Elastic Container Service (Amazon ECS)
		- Amazon's own container platform
		
	* Amazon Elastic Kubernetes Service (Amazon EKS)
		- Amazon's managed Kubernetes (open source)
		
	* AWS Fargate
		- Amazon's own Serverless container platform
		- Works with ECS and with EKS
		
	* Amazon ECR (Amazon Elastic Container Registry)
		- Store container images
--------------------------------------------------------------

Amazon ECS - EC2 Launch Type
	* ECS = Elastic Container Service
	* Launch Docker containers on AWS = Launch ECSTasks on ECS Clusters
	* EC2 Launch Type : you must provision & maintain the infrastructure (the EC2 instances)
	* Each EC2 Instance must run the ECS Agent to register in the ECS Cluster
	* AWS takes care of starting/stopping containers
	
Amazon ECS - Fargate Launch Type
	* Launch Docker containers on AWS
	* You do not provision the infrastructure (no EC2 instance to manage)
	* It's all Serverless !
	* You just create task definitions
	* AWS just run ECS Tasks for you based on the CPU/RAM you need.
	* To scale, just increase the number of tasks. Simple - no more EC2 instances
	
Amazon ECS - IAM Roles for ECS
	* EC2 Instance Profile (EC2 Launch Type only):
		- Used by the ECS agent
		- Makes API calls to ECS service
		- Send container logs to CloudWatch Logs
		- Pull Docker image from ECR
		- Reference sensitive data in Secrets Manager or SSM Paramter Store.
	* ECS Task Role:
		- Allows each task to have a specific role
		- Use different roles for the different ECS Serviers you run
		- Task Role is defined in the task definition
	* (++++++++++ Image ++++++++++++)
	
Amazon ECS - Load Balancer Integrations:
	* Application Load Balancer supprted and works for most use cases.
	* Network Load Balancer recommonded only for high throughput/high performance use cases, or to pair it with aws Private Link
	* Classis Load Balancer suppported but not recommended (no advanced feature - no Fargate)
	* (++++++++++ Image ++++++++++++)
	
Amazon ECS - Data Volumes (EFS)
	* Mount EFS file systems onto ECS tasks
	* Works for both EC2 and Fargate launch types
	* Tasks running in any AZ will share the same data in the EFS file system.
	* Fargate + EFS = Serverless
	* Use Cases: persistent multi-AZ shared storage for your containers.
	* Note : 
		- Amazon S3 cannot be mounted as a file system.
		
Creating ECS Cluster - Hands on - CHECK AGAIN
Creating ECS Service - Hands on - CHECK AGAIN

Amazon ECS - Auto Scaling
	* Automatically increase/decrease the desired number of ECS tasks
	* Amazon ECS Auto Scaling uses AWS Application Auto Scaling
		- ECS Service Average CPU Utilization
		- ECS Service Average Memory Utilization - Scale on RAM
		- ALB Request Count Per Target - metric coming from the ALB
	* Target Trackin - Scale based on target value for a specific cloudWatch metric
	* Step Scaling - scale based on a specified CloudWatch  Alarm
	* Scheduled Scaling - Scale based on a specified date/time (predictable changes)
	
	* ECS Service Auto Scaling (task level) != EC2 Auto Scaling (EC2 instance level)
	* Fargate Auto Scaling in much easier to setup (because Serverless)
	
EC2 Launch Type - Auto Scaling EC2 Instances
	* Accomodate ECS Service Scalin by adding underlying EC2 Instances
	* Auto Scaling Group Scaling
		- Scale your ASG based on CPU Utilization
		- Add EC2 instances over time
	* ECS Cluster Capacity Provider
		- Used to automatically provision and scale the infrastructure for your ECS Tasks
		- Capacity Provider paired with ans Auto Scaling Group
		- Add EC2 Instances when you're missing capacity (CPU, RAM ...)
		
ECS Scaling - Service CPU Usage Example
	* (++++++++++ Image ++++++++++++)
	
Amazon ECS - Solution Architectures
	* ECS tasks invoked by Event Bridge(++++++++++ Image ++++++++++++)
	* ESC tasks invoked by Event Bridge Scheduled(++++++++++ Image ++++++++++++)
	* ESC - SQS Queue Example(++++++++++ Image ++++++++++++)
	* ESC - Intercept Stopped Tasks using EventBridge(++++++++++ Image ++++++++++++)
	
Amazon ESC - Clean Up - Hands on

Amazon ECR 
	* ECR = Elastic Container Registry
	* Store and manage Docker images on AWS
	* Private and Public repository (Amazon ECR Public Gallery https://gallery.ecr.aws)
	* Fully integrated with ECS, backed by Amazon S3
	* Access is controlled throug IAM (permission errors => policy)
	* Supports image vulnerability scanning, versioning, image tags, image lifecycle,...
	* (++++++++++ Image ++++++++++++)
	
Amazon EKS - Overview
	* Amazon EKS - Amazon Elastic Kubernetes Service
	* It is a way to launch managed Kubernetes cluster on AWS
	* Kubernetes is an open-source system form automatic deployment, scaling and management of containerized(usually Docker) application.
	* It's an alternative to ECS, similar goal but different API
	* EKS supports EC2 if you want to deploy worker noes or Fargate to deploy serverless containers.
	* Use Case : if your company is already using Kubernetes on-permises or in another cloud, and wants to migrate to AWS using Kubernetes
	* Kubernetes is cloud-agnostic (can be used in any cloud - Azure, GCP ...)
	
Amazon EKS - Diagram
	* (++++++++++ Image ++++++++++++)
	
Amazon EKS - Node Types
	* Managed Node Groups
		- Creates and manages Nodes (EC2 instances) for you
		- Nodes are part of an ASG managed by EKS
		- Supports On-Demand or Spot Instances
	* Self-Managed Nodes
		- Nodes created by you and registered to the EKS cluster and managed by an ASG
		- You can use prebuilt AMI - Amazon EKS Optimized AMI
		- Supports On-Demand or Spot Instances
	* AWS Fargate
		- No maintenance required; no nodes managed
		
Amazon EKS - Data Volumes
	* Need to specify StorageClass manifest on your EKS cluster.
	* Leverages a Container Storages Interface (CSI) complaint driver.
	
	* Support for ...
		- Amazon EBS
		- Amazon EFS (Works with Fargate)
		- Amazon FSx for Lustre
		- Amazon FSx for NetApp ONTAP
		
Amazon EKS - Hands On

AWS App Runner
	* Fully managed service that makes it easy to deploy web applications and APIs at scale.
	* No infrastructure experience required.
	* Start with your source code or container image.
	* Automatically builds and deploy the web app.
	* Automatic scaling, highly available, load balancer, encryption
	* VPC access supports
	* Connect to database, cache, and message queue services.
	* Use Cases : web apps, APIs , microservices, rapid production deployments
	* (++++++++++ Image ++++++++++++)
	
AWS App Runner - Hands On

AWS App2Container (A2C)
	* CLI tool for migrating and modernizing Java and .Net web apps into docker containers.
	* Lif-and-shift your apps running in on-premises bare metal, virtual machines, or in any Cloud to AWS
	* Accelerate modernization, no code changes, migrate legacy apps...
	* Generates Cloudformation templates (compute, network...)
	* Register generated docker containers to ECR
	* Deploy to ECS, EKS, or App Runner
	* Supports pre-built CI/CD pipelines.
	* (++++++++++ Image ++++++++++++)