Whats Serverless ?
------------------
	1) Serverless is a new paradigm in which the developers don't have to manage servers anymore.
	2) They just deploy code.
	3) They just deploy ... functions !
	4) Initially .. Serverless == Faas(Function as a Service)
	5) Serverless was pioneered by AWS Lambda but now also includes anything that's managed: "databases, messaging, storage, etc."
	6) Serverless does not mean there are no servers..
		- it means you jut don't manage/provision/see them.
		
Serverless in AWS
	- AWS Lambda
	- DynamoDB
	- AWS Cognito
	- AWS API Gateway
	- Amazon S3
	- AWS SNS & SQS
	- AWS Kinesis Data Firehose
	- Aurora Serverless
	- Step Functions
	- Fargate
	
Why AWS Lambda:
	1) Amazon EC2
		- Virtual Servers in the Cloud
		- Limited by RAM and CPU
		- Coninuously running
		- Scaling means intervention to add/remove servers.
	2) Amazon Lambda 
		- Virtual functions - no servers to manage !
		- Limited by time - short executions
		- Run on-demand
		- Scaling is automated!
		
Benefits of AWS Lambda:
	1) Easy Pricing :
		- Pay per request and compute time.
		- Free tier of 1,000,000 AWS Lambda requests and 400,000 GBs of compute time
	2) Integrated with the whole AWS suite of services.
	3) Integrated with many programming languages  
	4) Easy monitoring through AWS CloudWatch
	5) Easy to get more resources per functions(up to 10 GB of RAM)
	6) Increasing RAM will also improve CPU and network!
	
AWS Lambda language support
	- Node.js (javascript)
	- Python
	- Java
	- C#(.NET Core) / Powershell
	- Ruby
	- Custom Runtime API (Community supported , example Rust or Golang)
	- Lambda Container Image
		* The container image must implement the Lambda Runtime API
		* ECS/Fargate is preferred for running arbitary Docker images
		
AWS Lambda Integrations (Main ones)
	- API Gateway
	- Kinesis
	- DynamoDB
	- S3
	- CloudFront
	- CloudWatch Events EventBridge
	- CloudWatch Logs
	- SNS
	- SQS
	- Cognito
	
Lambda Hands On: 
	AWS Lambda lets you run code without thinking about servers.
	
	How it works :
		Lambda responds to events - Once you create Lambda functions, you can configure them to response to events from a varity of sources. Try sending a mobile notification, streaming data to Lambda, or placing a photo in an S3 bucket.
		Scale seamlessly - Lambda scales up and down automatically to handle your workloads, and you don't pay anything when your code isn't running.
			* Your first 1 million requests or 400,000 GB- seconds of compute per month are free. Costs in this demo are based on a 128MB functions with a 1 second invocation duration.
		
		1) Create lambda functions
	
Lambda Limits :
	AWS Lambda Limits to Know - per region
	- Execution : 
		* Memory allocation : 128 MB - 10 GM (1 MB inrements)
		* Maximum execution time : 900 seconds (15 minutes)
		* Environment variables (4 KB)
		* Disk capacity in the "function container"(in /tmp) : 512 MB to 10 GB-
		* Concurrency executions : 1000 (can be increased)
	- Deployment :
		* Lambda function deployment size (compressed .zip) : 50 MB
		* Size of uncompressed deployment (code + dependencies) : 250 MB
		* Can use the /tmp directory to load other files at startup
		* Size of environment variables: 4 KB
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
Lambda Concurrency and Throttling :
	* Concurrency limit : up to 1000 concurrent executions.
	* Can set a "reserved concurrency" at the function level (=limit)
	* Each invocation over the concurrency limit will trigger a "Throttle".
	* Throttle behavior:
		- If synchronous invocation => return ThrottleError - 429
		- If asynchronous invocation => retry automatically and then go to DLQ
	* If you need a higher limit , open a support ticket.
	
	Lambda Concurrency Issue:
		* If you don't reserve (=limit) concurrency, the following can happen:
		
	Concurreny and Asynchronous Invocations:
		* If the function doesn't have enough concurrency available to process all events, additional requests are throttled.
		* For throttling errors(429) and system errors (500-series), Lambda returns the event to the queue and attempts to run the function again for up to 6 hours.
		* The retry interval increases exponentially from 1 second after the first attempt to a maximum of 5 minutes.
		
	Cold start & Porvisioned Concurrency
		* Cold Start :
			1) New instance => code is loaded and code outside the handler run (init)
			2) If the init is large (code,dependencies,SDK...) this process can take some time.
			3) First request served by new instances has higher latency than the rest.
		* Provisioned Concurrency :
			1) Concurrency is allocated before the function is invoked (in advance)
			2) So the cold start never happens and all invocations have low latency.
			3) Application Auto Scaling can manage concurrency (Schedule or target utilization)
		* Note
			1) Note : cold starts in VPC have been dramatically reduced in Oct & Nov 2019

Lamda Concurrency Hands On:

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Lambda SnapStart :
	1) Improves your Lambda functions performance up to 10x at no extra cost for Java,Python & .net
	2) When enabled, function is invoked from pre-initialized state (no function initialization from scratch)
	3) When you publish a new version:
		* Lambda initiazes your function
		* Take a snapshot of memory and disk state of the initialized function.
		* Snapshot is cached for low-latecny access.
		
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Lambda@Edge & CloudFront Functions :
	* Many modern applications execute some form of the logic at the edge.
	* Edge Function:
		- A code that you write and attach to CloundFron distributions
		- Runs close to your users to minimize latency
	* CloundFront provides two types: CloundFront Functions & Lambda@Edge
	* You don't have to mange any servers, deployed globally
	* Use case : customize the CDN content
	* Pay only for what you use.
	* Fully only for what you use.
	
	CloudFront Functions & Lambda@Edge Use Cases:
		- Website Security and Privacy
		- Dynamic Web Application at the Edge.
		- Search Engine Optimization (SEO)
		- Intelligently Route Across Origins and Data Centers
		- Bot Mitigation at the Edge.
		- Real-time Image Transformation
		- A\B Testing
		- User Authentication and Authorization
		- User Prioritization
		- User Tracking and Analytics
		
	CloudFront Functions (****Image*****)
		- Lightweight functions written in javascript
		- For high-scale, latency-sensitive CDN customiztions.
		- Sub-ms startup times, millions of requests/second.
		- Used to change Viewer requests and respnses:
			* Viewer Request : after CloudFront receives a request from a viewer
			* Viewer Response : before CloudFront forwards the response to the viewer.
		- Native feature of CloudFront (manage code entirely withing CloudFront)
		
	Lambda@Edge
		- Lambda functions written in NodeJs or Python\
		- Scale to 1000s of requests/second
		- Used to change CloudFront requests and responses:
			* Viewer Request - after CloudFront receives a rqueset from a viewer.
			* Origin Request - before CloudFront forwards the request to the origin.
			* Origin Response - after CloudFront receives the response from the origin
			* Viewer Response - before CloudFront forwards the response to the viewer.
		- Author your functions in one AWS Region (us-east-I), then CloudFront replictes to its locations.
		
	CloudFront Functions vs Lambda@Edge
		CloudFront Functions :
			1) Cache key normalization
				- Transform request attributes (headers, cookies, query strings, URL) to create an optimal Cache Key
			2) Header manipulation 
				- Insert/modify/delete HTTP headers in the request or response.
			3) URL rewrites or redirects
			4) Request authentication & authorization
				- Create and validate user-generated tokens (e.g., JWT) to allow/deny requests.
		Lambda@Edge
			1) Longer exection time (several ms)
			2) Adjustable CPU or memory
			3) Your code depends on a 3rd libraries (e.g., AWS SDK to access other AWS services)
			4) Network access to use external services for processing
			5) File System access or access to the body of HTTP requests.
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Lambda in VPC :

	* Lambda by default (*********Image***********)
		- By default, your Lambda function is lanuched outside your own VPC (in and AWS-owned VPC)
		- Therefore, it can not access resources in you VPC(RDS, ElasticCache, inernal ELB...)
		
	* Lambda in VPC
		- You must define the VPC ID, the Subnets and the Security Groups
		- Lambda will create and ENI(Elastic Network Interface) in your subnets.
		
	* Lambda with RDS Proxy (*********Image***********)
		- If Lambda functions directly access your database, they may open too many connections under high load
		- RDS Proxy 
			* Improve scalability by pooling and sharing DB connections
			* Improve availability by reducing by 66% the failover time and preserving connections.
			* Improve security by enforcing IAM authentication and storing credentials in Secret Manager.
		- The Lambda function must be deployed in your VPC, because RDS proxy is never publicly accessible
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

RDS - Invoking Lambda & Event Notification
	
	* Invoking Lambda from RDS & Aurora	 (*********Image***********)
		- Invoke Lambda functions from within your DB instanc.
		- Allows you to process data events from within a database.
		- Supported for RDS for PostgresSQL and Aurora MySQL.
		- Must allow outbound traffic to your Lambda function from within your DB instance (Public, NAT GW, VPC Endpoints)
		- DB instance must have the required permissions to invoke Lambda function (Lambda Resource-based policy and IAM Policy)
	
	* RDS Event Notifications  (*********Image***********)
		- Notifications that tells information about the DB instance itself (created, stopped, start, ...)
		- You don't have any information about the data itself.
		- Subscribe to the following event categories : DB instance, DB snapshot, DB Paramter Group, DB Security Group, RDS Proxy, Custom Engine Version.
		- Near real-time events (up to 5 minutes)
		- Send notifications to SNS or subsribe to events using EventBridge

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon DynamoDB
	
		* Fully managed, highly available with replication across multiple AZs
		* NoSQL database - not a relational database - with transaction support.
		* Scales to massive workloads, distributed database.
		* Millions of requests per seconds, trilions of row, 100s of TB of storage.
		* Fast and consistent in performance (Single-digit milliseconds)
		* integrated with IAM for security, authorization and administration.
		* Low cost and auto-scaling capabilities.
		* No maintenance or patching, always avaialble
		* Standard & Infrequent Access(IA) Table Class
	
	DynamoDB - Basics :
		* DynamoDB is made of Tables.
		* Each table has a Primary Key (must be decided at creation time)
		* Each table can have an infinite number of items (=rows)
		* Each item has attributes (Can be added over time - Can be null)
		* Maximum size of an item is 400KB.
		* Data types supported are : 
			- Scaler Types : String, Number, Binary, Boolean, Null
			- Document Types : List, Map
			- Set Types : String Set, Number Set, Binary Set
		* Therefore, in DynamoDB you can rapidly evolve scemas
		
	DynamoDB - Read/Write Capacity Modes
		* Control how you manage your table's capacity (read/write throughput)
		* Provisioned Mode (default)
			- You specify the number of read/writes per second
			- You need to plan capacity beforehand.
			- Pay for provisioned Read Capacity Units(RCU) & Write Capacity Units(WCU)
			- Possibility to add auto-scaling mode for RCU & WCU
		* On-Demand Mode
			- Read/Writes automatically scale up/down with your workloads
			- No capacity planning needed
			- Pay for what you use, more expensive ($$$)
			- Great for unpredictable workloads, steep suden spikes.
			
Amazon DynamoDB Hands On 

Amazon DynamoDB - Advanced Features
	
	1) DynamoDB Accelerator (DAX)   (**********Image***********)
		* Fully-managed, highly available, seamless in-memory cache for DynamoDB
		* Help solve read congestion by caching
		* Microseconds latency for cached data
		* Doesn't require application logic modification (compatible with existing DynamoDB APIs)
		* 5 minutes TTL for cache (default)
		
	2) DynamoDB Accelerator (DAX) vs ElastiCache   (*********Image***********)
	
	3) DynamoDB - Stream Processing
		* Ordered stream of item-level modifications(create/update/delete) in a table
		* Use cases :
			- React to changes in real-time (welcome email to users)
			- Real-time usage analytics
			- Insert into derivative tables
			- Implement cross-region replication
			- Invoke AWS Lambda on change to your DynamoDB table.
			
			* DynamoDB Streams
				- 24 hours retention
				- Limited # of consumers
				- Process using AWS Lambda Triggers, or DynamoDB Stream Kinesis adapter
			* Kinesis Data Stream (newer)
				- 1 year retention
				- High # of consumers
				- Process using AWS Lambda, Kinesis Data Analytics, Kinesis Data Firehose, AWS Glue Streaming ETL...
		
	4) DynamoDB Streams  (*********Image***********)
		
	5) DynamoDB Global Tables  (*********Image***********)
		* Make a DynamoDB table accessible with low latency in multiple-regions
		* Active - Active replication
		* Applications can READ and WRITE to the table in any region.
		* Must enable DynamoDB Stream as a pre-requisite.
		
	6) DynamoDB - Time To Live (TTL)  (*********Image***********)
		* Automatially delete items after an expiry timestamp
		* Use Cases : reduce stored data by keeping only current items, adhere to regulatory obligations, web session handling...
		
	7) DynamoDB - Backups for disaster recovery
		* Continuous backups using point-in-time recovery (PITR)
			- Optionally enabled for the last 35 days
			- Point-in-time recovery to any time within the backup window
			- The recovery process creates a new table
		* On-demand backups	
			- Full backups for long-term retention, until explicitely deleted
			- Doesn't affect performance or latency
			- Can be configured and managed in AWS Backup (enable cross-region copy)
			- The recovery process creates a new table.
			
	8) DynamoDB - Integration with Amazon s3  (*********Image***********)
		* Export to S3 (must enable PITR)
			- Works  for any point of time in the last 35 days 
			- Doesn't affect the read capcity of your table
			- Perform data analysis on top of DynamoDB
			- Retain snapshots for auditing
			- ETL on top of S3 data before importin back into DynamoDB
			- Export in DynamoDB JSON or ION format
		* Import from s3	
			- Import CSV, DynamoDB JSON or ION format
			- Doesn't consume any write capacity 
			- Creates a new table
			- Import errors are logged in CloudWatch Logs.
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

API Gateway :
	
	* AWS Lambda + API Gateway : No infrastructure to manage
	* Support for the WebSocket Protocol
	* Handle API versioning (v1,v2 ...)
	* Handle different environments (dev,test,prod ...)
	* Handle Security (Authentication and Authorization)
	* Create API keys, handle request throttling
	* Swagger / Open API import to quickly define APIs
	* Transform and validate requests and responses.
	* Generate SDK and API spedifications.
	* Cache API response.
	
	* API Gateway - Integerations High Level
		1) Lambda functions	
			- Invoke Lambda function
			- Easy way to expose REST API backed by AWS Lambda
		2) HTTP 
			- Expose HTTP endpoints int the backend
			- Example : internal HTTP API on premise, Application Load Balancer
			- Why ? Add rate limitting, caching , user authentication, API keys , etc..
		3) AWS Service 
			- Expose any AWS API through the API Gateway ?
			- Example : start an AWS Function workflow, post a message to SQS
			- Why ? Add authentication, deply publicly, rate control ..
			
	* API Gateway - AWS Service Integration Kinesis Data Streams example (*********Image***********)
	
	* API Gateway - Endpoint Types
		1) Edge-Optimized(default) : For global clients
			- Requests are routed through the CloudFront Edge locations (improves latency)
			- The API Gateway still lives in only one region
		2) Regional :
			- For clients within the same region
			- Could manually combine with CloudFront (more control over the caching strategies and the distribution)
		3) Private :
			- Can only be accessed from your VPC using an interface VPC endpoint (ENI)
			- Use a resource policy to define access.
			
	* API Gateway -  Security 
		1) User Authentication through
			- IAM Roles (useful for internal applications)
			- Cognito (identity for external users - example mobile users)
			- Custom Authorizer (your own logic)
		2) Custom Domain Name HTTPs security through integration with AWS Certificate Manager (ACM)
			- If using Edge-Optimized endpoint, then the certificate must be in us-ease-1
			- If using Regional endpoint, the certificate must be in the API Gateway region
			- Must setup CNAME or A-alias record in Rounte 53.
			
API Gateway Hands on :

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

AWS Step Functions (*********Image***********):
	
	* Build serverless visual workflow to orchestrate your Lambda functions
	* Feature : Sequence, parallel, conditions, timeouts, error handling, ...
	* Can integrate with EC2, ECS, On-premises servers, API Gateway, SQS queues, etc.,
	* Possibility of implementing human approval feature.
	* Use cases : Order fulfillment, data processing, web applications, any workflow.
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Cognito	
	* Give users an identity to interact with our web or mobile application.
	* Cognito User Pools :
		- Sign in functionality for app users.
		- Integrate with API Gateway & Application Load Balancer
	* Cognito Identity Pools (Federated Identity)
		- Provide AWS credentials to users so they can access AWS resources directly
		- Inegrate with Cognito User Pools as an identity provider.
	* Cognito vs IAM : "hundred of users", "mobile users", "authentication with SAML"
	
	* Cognito User Pools (CUP) - User Features
		- Create s serverless database of user for your web & mobile+ apps.
		- Simple login : Username (or email)/password combination
		- Password reset
		- Email & Phone Number Verification
		- Multi-factor authentication (MFA)
		- Federated Identities: Users from Facebook, Google, SAML ...
	* Cognito User Pools (CUP) - Integrations
		- CUP integrates with API Gateway and Application Load Balancer
			(*********Image***********)
	
	*Cognito Identity Pools (Federated Identities)
		- Get identities for "users" so they obtain temporary AWS credentials
		- Users source can be Cognito User Pools, 3rd party logins, etc ...
		- Users can then access AWS services directly or through API Gateway
		- The IAM policies applied to the credentials are defined in Cognito.
		- They can be customized based on the user_id for fine grained control 
		- Default IAM roles for authenticated and gues users.
	*Cognito Identity Pools - Diagram
			(*********Image***********)
	*Cognito Identity Pools
		- Row Level Security in DynamoDB
			
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	